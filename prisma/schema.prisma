generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MeteorologicalStation {
  id             String                      @id @default(uuid())
  name           String                      @unique @db.VarChar(100)
  latitude       Decimal                     @db.Decimal(10, 8)
  longitude      Decimal                     @db.Decimal(11, 8)
  description    String?
  status         MeteorologicalStationStatus @default(ACTIVE)
  createdAt      DateTime                    @default(now()) @map("created_at")
  updatedAt      DateTime                    @updatedAt @map("updated_at")
  address              String?                     @db.VarChar(255)
  macAddress           String?                     @unique @map("mac_address") @db.VarChar(50)
  sensorReadings       SensorReading[]
  parameters           Parameter[]
  alerts               RegisteredAlerts[]
  // triggeredAlerts      TriggeredAlerts[]

  @@index([status])
  @@index([latitude, longitude])
  @@index([name])
  @@index([macAddress])
  @@map("meteorological_stations")
}

model SensorReading {
  id              String                @id @default(uuid())
  stationId       String                @map("station_id")  // This is the station UUID from MAC address lookup
  timestamp       DateTime
  mongoId         String                @unique @map("mongo_id")
  macEstacao      String?               @map("mac_estacao") // station MAC as linestring type
  uuidEstacao     String?               @map("uuid_estacao")
  valor           Json                  @map("valor") // renamed from readings
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  station         MeteorologicalStation @relation(fields: [stationId], references: [id], onDelete: Cascade)

  parameters      SensorReadingParameter[] // join table
  alerts          RegisteredAlerts[]       // reverse relation from medidas FK

  @@index([stationId])
  @@index([timestamp])
  @@index([stationId, timestamp])
  @@index([mongoId])
  @@map("sensor_readings")
}

model TipoParametro {
  id           String  @id @default(uuid())
  jsonId       String  @map("json_id")
  nome         String
  metrica      String
  polinomio    String?
  coeficiente  Float[]
  leitura      Json    // factor/offset configuration

  parameters   Parameter[]

  @@map("tipo_parametro")
}

model Parameter {
  id                  String   @id @default(uuid())
  stationId           String   @map("station_id")
  tipoParametroId     String   @map("tipo_parametro_id")
  tipoAlertaId        String?  @map("tipo_alerta_id")

  station             MeteorologicalStation @relation(fields: [stationId], references: [id], onDelete: Cascade)
  tipoParametro       TipoParametro @relation(fields: [tipoParametroId], references: [id], onDelete: Cascade)
  tipoAlerta          TipoAlerta? @relation(fields: [tipoAlertaId], references: [id], onDelete: SetNull)
  alerts              RegisteredAlerts[] @relation("ParameterAlerts")

  readings            SensorReadingParameter[] // join table

  @@index([stationId])
  @@index([tipoParametroId])
  @@index([tipoAlertaId])
  @@unique([stationId, tipoParametroId])
  @@map("parameter")
}

model TipoAlerta {
  id        String   @id @default(uuid())
  tipo      String
  publica   Boolean
  condicao  String   // enum for conditions
  valor     String
  criadoEm  DateTime @default(now()) @map("criado_em")
  limite    Decimal
  nivel     String   @default("warning")
  duracaoMin Int?    @map("duracao_min")

  parameters Parameter[]     // parameters linked to this alert type
  alerts     RegisteredAlerts[]

  @@map("tipo_alerta")
}

model RegisteredAlerts {
  id              String   @id @default(uuid())
  data            DateTime @default(now())
  stationId       String   @map("station_id")
  parameterId     String   @map("parameter_id")
  tipoAlertaId    String   @map("tipo_alerta_id")
  medidasId       String?  @map("medidas_id") // FK to SensorReading
  createdAt       DateTime @default(now()) @map("created_at")

  station         MeteorologicalStation @relation(fields: [stationId], references: [macAddress], onDelete: Cascade)
  parameter       Parameter             @relation("ParameterAlerts", fields: [parameterId], references: [id], onDelete: Cascade)
  tipoAlerta      TipoAlerta           @relation(fields: [tipoAlertaId], references: [id], onDelete: Cascade)
  medidas         SensorReading?       @relation(fields: [medidasId], references: [id], onDelete: SetNull)

  @@index([stationId])
  @@index([parameterId])
  @@index([tipoAlertaId])
  @@index([medidasId])
  @@unique([stationId, parameterId, tipoAlertaId])
  @@map("registered_alerts")
}

model MigrationState {
  id                String   @id @default(uuid())
  name              String   @unique
  lastSyncTimestamp Int      @map("last_sync_timestamp")
  totalMigrated     Int      @default(0) @map("total_migrated")
  lastRunAt         DateTime @default(now()) @map("last_run_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("migration_states")
}

model SensorReadingParameter {
  sensorReading   SensorReading @relation(fields: [sensorReadingId], references: [id], onDelete: Cascade)
  sensorReadingId String

  parameter       Parameter     @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  parameterId     String

  @@id([sensorReadingId, parameterId])
  @@map("sensor_reading_parameters")
}

enum MeteorologicalStationStatus {
  ACTIVE
  INACTIVE
}
